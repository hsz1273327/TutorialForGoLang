// Code generated by protoc-gen-go. DO NOT EDIT.
// source: square_service.proto

package squarerpc_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Message              float64  `protobuf:"fixed64,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_15d485b4d7dd1f2e, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() float64 {
	if m != nil {
		return m.Message
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "squarerpc_service.Message")
}

func init() { proto.RegisterFile("square_service.proto", fileDescriptor_15d485b4d7dd1f2e) }

var fileDescriptor_15d485b4d7dd1f2e = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x2e, 0x2c, 0x4d,
	0x2c, 0x4a, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x84, 0x88, 0x16, 0x15, 0x24, 0xc3, 0x24, 0x94, 0x94, 0xb9, 0xd8, 0x7d, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x53, 0x85, 0x24, 0xe0, 0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xc6, 0x20, 0x18,
	0xd7, 0x28, 0x82, 0x8b, 0x37, 0x18, 0xac, 0x33, 0x18, 0xa2, 0x4b, 0xc8, 0x9d, 0x8b, 0x33, 0xb8,
	0x34, 0x17, 0x22, 0x26, 0x24, 0xa5, 0x87, 0x61, 0xac, 0x1e, 0x54, 0xa7, 0x14, 0x1e, 0x39, 0x25,
	0x06, 0x0d, 0xc6, 0x24, 0x36, 0xb0, 0xc3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x56,
	0x29, 0x44, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SquareServiceClient is the client API for SquareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SquareServiceClient interface {
	SumSquare(ctx context.Context, opts ...grpc.CallOption) (SquareService_SumSquareClient, error)
}

type squareServiceClient struct {
	cc *grpc.ClientConn
}

func NewSquareServiceClient(cc *grpc.ClientConn) SquareServiceClient {
	return &squareServiceClient{cc}
}

func (c *squareServiceClient) SumSquare(ctx context.Context, opts ...grpc.CallOption) (SquareService_SumSquareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SquareService_serviceDesc.Streams[0], "/squarerpc_service.SquareService/SumSquare", opts...)
	if err != nil {
		return nil, err
	}
	x := &squareServiceSumSquareClient{stream}
	return x, nil
}

type SquareService_SumSquareClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type squareServiceSumSquareClient struct {
	grpc.ClientStream
}

func (x *squareServiceSumSquareClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *squareServiceSumSquareClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SquareServiceServer is the server API for SquareService service.
type SquareServiceServer interface {
	SumSquare(SquareService_SumSquareServer) error
}

// UnimplementedSquareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSquareServiceServer struct {
}

func (*UnimplementedSquareServiceServer) SumSquare(srv SquareService_SumSquareServer) error {
	return status.Errorf(codes.Unimplemented, "method SumSquare not implemented")
}

func RegisterSquareServiceServer(s *grpc.Server, srv SquareServiceServer) {
	s.RegisterService(&_SquareService_serviceDesc, srv)
}

func _SquareService_SumSquare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SquareServiceServer).SumSquare(&squareServiceSumSquareServer{stream})
}

type SquareService_SumSquareServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type squareServiceSumSquareServer struct {
	grpc.ServerStream
}

func (x *squareServiceSumSquareServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *squareServiceSumSquareServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SquareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squarerpc_service.SquareService",
	HandlerType: (*SquareServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SumSquare",
			Handler:       _SquareService_SumSquare_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "square_service.proto",
}
